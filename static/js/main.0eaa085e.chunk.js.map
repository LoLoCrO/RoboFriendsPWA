{"version":3,"sources":["components/Card.tsx","utl.ts","components/CardList.tsx","components/SearchBox.tsx","components/Scroll.tsx","components/ErrorBoundry.tsx","containers/App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","id","name","username","email","CardContainer","Img","alt","src","styled","div","img","mapUsersToRobots","users","robots","robot","user","push","CardList","searchField","useState","robotsList","setRobotsList","filterRobots","filter","toLowerCase","includes","useEffect","a","async","fetch","apiCall","json","fetchUsers","map","key","SearchBox","searchChange","SearchBoxContainer","SearchBoxInput","type","placeholder","onChange","input","Scroll","children","ScrollContainer","ErrorBoundry","error","App","setSearchField","AppContainer","AppTitle","event","target","value","h1","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"u0BAUA,IAaeA,EAbmB,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,GAAIC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MACrD,OACI,kBAACC,EAAD,KACI,2BAAIF,GACJ,kBAACG,EAAD,CAAKC,IAAI,SAASC,IAAG,+BAA0BP,EAA1B,mBACrB,6BACI,4BAAKC,GACL,2BAAIE,MAQdC,EAAgBI,IAAOC,IAAV,KAiBbJ,EAAMG,IAAOE,IAAV,KCxCIC,EAAmB,SAACC,GAE7B,IAAIC,EAAkB,GAClBC,EAAe,CAAEd,GAAI,EAAGC,KAAM,GAAIE,MAAO,GAAID,SAAU,IAHf,uBAK5C,YAAiBU,EAAjB,+CAAwB,CAAC,IAAhBG,EAAe,QAEpBD,EAAMd,GAAKe,EAAKf,GAChBc,EAAMb,KAAOc,EAAKd,KAClBa,EAAMX,MAAQY,EAAKZ,MACnBW,EAAMZ,SAAWa,EAAKb,SAEtBW,EAAOG,KAAKF,GACZA,EAAQ,CAAEd,GAAI,EAAGC,KAAM,GAAIE,MAAO,GAAID,SAAU,KAbR,kFAgB5C,OAAOW,G,gHCPX,IAsCeI,EAtC2B,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EAEvBC,mBAAkB,IAFK,mBAEpDC,EAFoD,KAExCC,EAFwC,KAarDC,EAAeF,EAAWG,QAAO,SAAAV,GACnC,OAAOA,EAAOZ,KAAKuB,cAAcC,SAASP,EAAYM,kBAK1D,OAFAE,qBAAU,YAbS,uBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAEOE,MAAM,+CAFb,cAETC,EAFS,kBAAAH,EAAA,MAGKG,EAAQC,QAHb,cAGTnB,EAHS,kBAAAe,EAAA,MAIMhB,EAAiBC,IAJvB,OAITC,EAJS,OAMfQ,EAAcR,GANC,sCAaDmB,KAAgB,IAG9B,kBAAC,EAAD,KAEQV,EAAaW,KACT,SAACnB,GAAD,OACI,kBAAC,EAAD,CACIoB,IAAKpB,EAAMd,GACXA,GAAIc,EAAMd,GACVC,KAAMa,EAAMb,KACZC,SAAUY,EAAMZ,SAChBC,MAAOW,EAAMX,aAWnCC,EAAgBI,IAAOC,IAAV,K,4UC5CnB,IAYe0B,EAZ6B,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAC3C,OACI,kBAACC,EAAD,KACI,kBAACC,EAAD,CACIC,KAAK,SACLC,YAAY,gBACZC,SAAUL,MAQpBC,EAAqB7B,IAAOC,IAAV,KAIlB6B,EAAiB9B,IAAOkC,MAAV,K,6KCtBpB,IAQeC,EARe,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC7B,OACI,kBAACC,EAAD,KACKD,IAOPC,EAAkBrC,IAAOC,IAAV,KCANqC,EAXqB,SAAC,GAAkB,IAAhBF,EAAe,EAAfA,SAAe,EAExBzB,oBAAkB,GAFM,mBAE3C4B,EAF2C,UAIlD,OAAIA,EACO,uDAEAH,G,sSCDf,IAqBeI,EArBO,WAAO,IAAD,EAEc7B,mBAAiB,IAF/B,mBAEjBD,EAFiB,KAEJ+B,EAFI,KAQxB,OACI,kBAACC,EAAD,KACI,kBAACC,EAAD,oBACA,kBAAC,EAAD,CAAWf,aAPI,SAACgB,GACpBH,EAAeG,EAAMC,OAAOC,UAOxB,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUpC,YAAaA,QASrCgC,EAAe1C,IAAOC,IAAV,KAKZ0C,EAAW3C,IAAO+C,GAAV,KCxBMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0eaa085e.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\ninterface CardProps {\n    id: number;\n    name: string;\n    username: string;\n    email: string;\n}\n\nconst Card: React.FC<CardProps> = ({ id, name, username, email }) => {\n    return (\n        <CardContainer>\n            <p>{username}</p>\n            <Img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </CardContainer>\n    );\n}\n\nexport default Card;\n\nconst CardContainer = styled.div`\n    background-color: #0ccac4;\n    word-wrap: break-word;\n    display: inline-block;\n    border-radius: .5rem;\n    border-width: .25rem;\n    text-align: center;\n    font-size: 0.8rem;\n    padding: .3rem;\n    margin: .8rem;\n    width: 15rem;\n\n    transition: all .2s ease-in-out;\n    &:hover { transform: scale(1.1); }\n    box-shadow: 4px 4px 8px 0px rgba( 0, 0, 0, 0.2 );\n`;\n\nconst Img = styled.img`\n    width: 10rem;\n    height 10rem;\n`;","import { Robot } from './robot';\n\nexport const mapUsersToRobots = (users: any) => {\n\n    let robots: Robot[] = [];\n    let robot: Robot = { id: 0, name: '', email: '', username: '' };\n\n    for (let user of users) {\n\n        robot.id = user.id;\n        robot.name = user.name;\n        robot.email = user.email;\n        robot.username = user.username;\n\n        robots.push(robot);\n        robot = { id: 0, name: '', email: '', username: '' };\n    }\n\n    return robots;\n}","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport Card from './Card';\n\nimport { Robot } from '../robot';\nimport { mapUsersToRobots } from '../utl';\n\ninterface CardListProps {\n    searchField: string;\n}\n\nconst CardList: React.FC<CardListProps> = ({ searchField }) => {\n\n    const [robotsList, setRobotsList] = useState<Robot[]>([]);\n\n    const fetchUsers = async () => {\n\n        const apiCall = await fetch('https://jsonplaceholder.typicode.com/users');\n        const users = await apiCall.json();\n        const robots = await mapUsersToRobots(users);\n\n        setRobotsList(robots);\n    }\n\n    const filterRobots = robotsList.filter(robots => {\n        return robots.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    useEffect(() => { fetchUsers() }, []);\n\n    return (\n        <CardContainer>\n            {\n                filterRobots.map(\n                    (robot) => (\n                        <Card\n                            key={robot.id}\n                            id={robot.id}\n                            name={robot.name}\n                            username={robot.username}\n                            email={robot.email}\n                        />\n                    )\n                )\n            }\n        </CardContainer>\n    );\n}\n\nexport default CardList;\n\nconst CardContainer = styled.div`\n    margin-top: 1rem;\n    float: left;\n`;","import React from 'react';\nimport styled from 'styled-components';\n\ninterface SearchBoxProps {\n    searchChange: (event: any) => any;\n}\n\nconst SearchBox: React.FC<SearchBoxProps> = ({ searchChange }) => {\n    return (\n        <SearchBoxContainer>\n            <SearchBoxInput\n                type='search'\n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </SearchBoxContainer>\n    )\n}\n\nexport default SearchBox;\n\nconst SearchBoxContainer = styled.div`\n    padding: .2rem;\n`;\n\nconst SearchBoxInput = styled.input`\n    padding: .7rem;\n    border-style:solid;\n    border-color: #0ccac4;\n    border-width: .2rem;\n    border-radius: .5rem;\n    background-color: lightblue;\n\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Scroll: React.FC<any> = ({ children }) => {\n    return (\n        <ScrollContainer>\n            {children}\n        </ScrollContainer>\n    );\n}\n\nexport default Scroll;\n\nconst ScrollContainer = styled.div`\n    margin-top: 2rem;\n    overflow-Y: scroll;\n    border: 0.2rem solid #0ccac4;\n    height: 65vh;\n`;","import React, { useState } from 'react';\n\nconst ErrorBoundry: React.FC<any> = ({ children }) => {\n\n    const [error, setError] = useState<boolean>(false);\n\n    if (error) {\n        return <h1>Ooops! That is not good</h1>;\n    } else {\n        return children;\n    }\n}\n\nexport default ErrorBoundry;","import React, { useState } from 'react';\nimport CardList from '../components/CardList';\nimport './App.css';\nimport styled from 'styled-components';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nconst App: React.FC = () => {\n\n    const [searchField, setSearchField] = useState<string>('');\n\n    const onSearchChange = (event: any) => {\n        setSearchField(event.target.value);\n    };\n\n    return (\n        <AppContainer>\n            <AppTitle>RoboFriends</AppTitle>\n            <SearchBox searchChange={onSearchChange} />\n            <Scroll>\n                <ErrorBoundry>\n                    <CardList searchField={searchField} />\n                </ErrorBoundry>\n            </Scroll>\n        </AppContainer>\n    )\n}\n\nexport default App;\n\nconst AppContainer = styled.div`\n    position: relative;\n    text-align: center;\n`;\n\nconst AppTitle = styled.h1`\n    font-family: 'SEGA LOGO FONT';\n    font-weight: 200;\n    font-size: 3rem;\n    color: #0ccac4;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}